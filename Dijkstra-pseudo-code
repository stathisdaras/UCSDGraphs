Dijkstra(S,G):
  Initialize: Priority queue (PQ), visited HashSet,
              parent HashMap, and distances to infinity.
  Enqueue {S,0} onto the PQ
  while PQ is not empty:
    dequeue node curr from front of queue
    if (curr is not visited)
      add curr to visited set
      if (curr == G) return parent map
      for each of curr's neighbors, n, not in visited set:
        if path through curr to n is shorter
          update curr as n's parent in parent map
          enqueue {n,distance} into the PQ
  //if we get here then there's no path from S to G